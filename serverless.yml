service: serverless-shortlinker-api

frameworkVersion: "3"

plugins:
  - serverless-plugin-typescript

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: eu-central-1

  environment:
    USERS_TABLE: ${self:service}-${sls:stage}-USERS_TABLE
    LINKS_TABLE: ${self:service}-${sls:stage}-LINKS_TABLE
    #DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}

    #https://udhcf9fhw2.execute-api.eu-central-1.amazonaws.com/links/d0f280
    BASE_URL: !GetAtt HttpApi.ApiEndpoint

    # SQS_DEACTIVATION_QUEUE_URL: !Ref DeactivationQueue

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - { "Fn::GetAtt": ["TableUsers", "Arn"] }
            - { "Fn::GetAtt": ["TableLinks", "Arn"] }

functions:
  signUp:
    handler: src/functions/auth.signUp
    events:
      - httpApi:
          path: /auth/sign-up
          method: post
        #  cors: true

  signIn:
    handler: src/functions/auth.signIn
    events:
      - httpApi:
          path: /auth/sign-in
          method: post
        #  cors: true

  usersList:
    handler: src/functions/auth.usersList
    events:
      - httpApi:
          path: /auth/list
          method: get

  createNewLink:
    handler: src/functions/links.createNewLink

    events:
      - httpApi:
          path: /links/create-new-link
          method: post

  linksList:
    handler: src/functions/links.linksList
    events:
      - httpApi:
          path: /links/list
          method: get

  redirectToOriginalLink:
    handler: src/functions/links.redirectToOriginalLink
    events:
      - httpApi:
          path: /links/{linkMarker}
          method: get

  deactivateLink:
    handler: src/functions/links.deactivateLink
    events:
      - httpApi:
          path: /links/deactivate/{linkID}
          method: patch

  deactivateLinkCron:
    handler: src/functions/links.deactivateLinkCron
    events:
      # - schedule: "cron(0 0 * * *)"
      - httpApi:
          path: /links/deactivate
          method: get

  # ses-services:
  #   handler: src/services/ses.sendEmailsForDeactivatedLinks
  #   event:
  #     - sqs:
  #         arn: !GetAtt DeactivationQueue.Arn
  #         batchSize: 10

resources:
  Resources:
    TableUsers:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}

        AttributeDefinitions:
          - AttributeName: userID
            AttributeType: S

        KeySchema:
          - AttributeName: userID
            KeyType: HASH

        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2

    TableLinks:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.environment.LINKS_TABLE}

        AttributeDefinitions:
          - AttributeName: linkID
            AttributeType: S

        KeySchema:
          - AttributeName: linkID
            KeyType: HASH

        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    # DeactivationQueue:
    #   Type: AWS::SQS::Queue
    #   Properties:
    #     QueueName: deactivation-queue
    #     VisibilityTimeout: 900
    #     MessageRetentionPeriod: 86400
# TableName: ${self:provider.environment.DYNAMODB_TABLE}
# - { "Fn::GetAtt": ["TableUsers", "Arn"] }
# - { "Fn::GetAtt": ["TableLinks", "Arn"] }
